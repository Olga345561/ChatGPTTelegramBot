from telegram import Update
from telegram.ext import ContextTypes
from util import send_text, send_text_buttons
from gpt import ChatGptService
from credentials import ChatGPT_TOKEN
import logging
from item_buttons import LANG_BUTTONS, TRANSLATE_CONTINUE_BUTTONS
from menu_handler import start

chat_gpt = ChatGptService(ChatGPT_TOKEN)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –û–±—Ä–æ–±–Ω–∏–∫ –ø–µ—Ä–µ–∫–ª–∞–¥—É ‚Äî –æ—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async def translator_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_data = context.user_data
    message_text = update.message.text

    # –Ø–∫—â–æ –º–æ–≤–∞ —â–µ –Ω–µ –≤–∏–±—Ä–∞–Ω–∞ ‚Äî –ø–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –≤–∏–±–æ—Ä—É –º–æ–≤–∏
    if 'translator_language' not in user_data:
        # –û—á—ñ–∫—É—î–º–æ, —â–æ callback –æ–±—Ä–æ–±–∏—Ç—å –≤–∏–±—ñ—Ä –º–æ–≤–∏
        await send_text_buttons(update, context, "–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É:", LANG_BUTTONS)
        return

    # –Ø–∫—â–æ –º–æ–≤–∞ –≤–∏–±—Ä–∞–Ω–∞ ‚Äî –ø–µ—Ä–µ–∫–ª–∞–¥–∞—î–º–æ —Ç–µ–∫—Å—Ç
    target_lang = user_data['translator_language']

    # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ prompt –¥–ª—è ChatGPT
    prompt = f"–ü–µ—Ä–µ–∫–ª–∞–¥–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ {target_lang}:\n\n{message_text}"

    #–ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è "–ü–µ—Ä–µ–∫–ª–∞–¥–∞—é..."
    waiting_message = await send_text(update, context, "–ü–µ—Ä–µ–∫–ª–∞–¥–∞—é —Ç–µ–∫—Å—Ç...")

    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–µ—Ä–µ–∫–ª–∞–¥ –≤—ñ–¥ GPT
        translated_text = await chat_gpt.add_message(prompt)
        await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=waiting_message.message_id)

        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–µ—Ä–µ–∫–ª–∞–¥ —ñ–∑ –∫–Ω–æ–ø–∫–∞–º–∏
        await send_text_buttons(
            update,
            context,
            f"üåç –ü–µ—Ä–µ–∫–ª–∞–¥ ({target_lang}):\n\n{translated_text}",
            TRANSLATE_CONTINUE_BUTTONS
        )

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–∫–ª–∞–¥—É: {e}")
        await send_text(update, context, "–ù–∞ –∂–∞–ª—å, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=waiting_message.message_id)


# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥–∞—á–∞
async def translator_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    user_data = context.user_data

    # –ö–Ω–æ–ø–∫–∞ "–ó–∞–∫—ñ–Ω—á–∏—Ç–∏" ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –≤ –º–µ–Ω—é
    if data == 'start':
        user_data.pop('conversation_state', None)
        user_data.pop('translator_language', None)
        await start(update, context)
        return

    # –ö–Ω–æ–ø–∫–∞ "–ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É" ‚Äî –æ—á–∏—â–∞—î–º–æ –≤–∏–±—ñ—Ä –º–æ–≤–∏
    if data == 'translator_change':
        user_data.pop('translator_language', None)
        await send_text_buttons(update, context, "–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–≤—É –º–æ–≤—É –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É:", LANG_BUTTONS)
        return

    # –Ø–∫—â–æ –æ–±—Ä–∞–Ω–∞ –º–æ–≤–∞
    if data.startswith('lang_'):
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—Ä–∞–Ω—É –º–æ–≤—É
        lang_name = LANG_BUTTONS[data]
        user_data['translator_language'] = lang_name
        user_data['conversation_state'] = 'translator'
        await send_text(update, context, f"–í–∏ –æ–±—Ä–∞–ª–∏ –º–æ–≤—É: *{lang_name}*\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É.")
