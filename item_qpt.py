from telegram import Update
from telegram.ext import ContextTypes
from util import (send_text, load_prompt, send_image, send_text_buttons)
from gpt import ChatGptService
from credentials import ChatGPT_TOKEN
import logging
from item_buttons import get_keyboard, QUESTION_BUTTONS
from telegram.error import Conflict, NetworkError
from menu_handler import start


chat_gpt = ChatGptService(ChatGPT_TOKEN)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /question –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
async def gpt_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∑–∞–∑–¥–∞–ª–µ–≥—ñ–¥—å –ø—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        await send_image(update, context, 'question')

        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–∞–∑–¥–∞–ª–µ–≥—ñ–¥—å –ø—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        prompt = load_prompt('question_txt')
        chat_gpt.set_prompt(prompt)  # –¶–µ –ø–æ–≤–Ω—ñ—Å—Ç—é —Å–∫–∏–¥–∞—î —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É —Å–µ—Ä–≤—ñ—Å—ñ GPT

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –∑ item_buttons.py
        keyboard = get_keyboard(QUESTION_BUTTONS)

        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–æ—é
        await send_text_buttons(
            update,
            context,
            "–ó–∞–¥–∞–π—Ç–µ –ø–∏—Ç–∞–Ω–Ω—è, —ñ —è –≤—ñ–¥–ø–æ–≤—ñ–º –≤–∞–º –Ω–∞ –Ω—å–æ–≥–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é ChatGPT. "
            "\n–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.",
            QUESTION_BUTTONS
        )

        #–ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω —Ä–æ–∑–º–æ–≤–∏ —É –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        context.user_data['conversation_state'] = 'gpt'

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É GPT-–¥—ñ–∞–ª–æ–≥—É: {e}")
        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
        await send_text(update, context, "–ù–∞–∂–∞–ª—å –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.")

#–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–≤—ñ–¥–ø–æ–≤—ñ–¥—å GPT –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞)
async def gpt_question_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('conversation_state') != 'gpt':
        return

    user_text = update.message.text.strip()

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
    waiting_message = await send_text(update, context, "üîç –û–±—Ä–æ–±–ª—è—é –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è...")

    try:
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–∏—Å—Ç–µ–º–Ω–∏–π prompt
        prompt = load_prompt('question_txt')
        chat_gpt.set_prompt(prompt)

        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ GPT
        response = await chat_gpt.send_question(prompt, user_text)

        # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è, —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤–æ–Ω–æ —ñ—Å–Ω—É—î —ñ –º–∞—î message_id
        if waiting_message and hasattr(waiting_message, "message_id"):
            try:
                await context.bot.delete_message(
                    chat_id=update.effective_chat.id,
                    message_id=waiting_message.message_id
                )
            except Exception as e:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è: {e}")

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏
        await send_text_buttons(update, context, f"–í—ñ–¥–ø–æ–≤—ñ–¥—å:\n\n{response}", QUESTION_BUTTONS)

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ ChatGPT: {e}")

        # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏, —è–∫—â–æ –≤–æ–Ω–æ —ñ—Å–Ω—É—î
        if waiting_message and hasattr(waiting_message, "message_id"):
            try:
                await context.bot.delete_message(
                    chat_id=update.effective_chat.id,
                    message_id=waiting_message.message_id
                )
            except Exception as e2:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–∫–∏: {e2}")

        await send_text(update, context, "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

# === –û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ ‚Äú–ó–∞–∫—ñ–Ω—á–∏—Ç–∏‚Äù ===
async def end_conversation_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    context.user_data['conversation_state'] = None
    await start(update, context)