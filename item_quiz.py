from telegram import Update
from telegram.ext import ContextTypes
from util import (send_text, load_prompt, send_image)
from gpt import ChatGptService
from credentials import ChatGPT_TOKEN
import logging
from menu_handler import start
from item_error_gpt import error_gpt
from item_buttons import QUIZ_BUTTONS, QUIZ_ACTION_BUTTONS, get_keyboard,QUIZ_EXIT_BUTTONS

chat_gpt = ChatGptService(ChatGPT_TOKEN)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /quiz
async def quiz_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∑–∞–∑–¥–∞–ª–µ–≥—ñ–¥—å –ø—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    await send_image(update, context, 'quiz')

    # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –∑ —Ç–µ–º–∞–º–∏
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–í–∏–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É –Ω–∏–∂—á–µ:",
        reply_markup=get_keyboard({**QUIZ_BUTTONS, **QUIZ_EXIT_BUTTONS})
    )
# –û–±–µ—Ä–∞—î–º–æ —Ç–µ–º—É
async def quiz_topic_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):

    # –û–±—Ä–æ–±–ª—è—î–º–æ –æ–±—Ä–∞–Ω—É —Ç–µ–º—É
    query = update.callback_query
    await query.answer()

    #–î—ñ—è –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –∫–Ω–æ–ø–∫–∏
    topic_key = query.data
    # ‚úÖ —Ä–µ–∞–≥—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Ç–µ–º
    if not topic_key.startswith("topic_"):
        return  # –Ω–µ —á—ñ–ø–∞—î–º–æ —ñ–Ω—à—ñ –∫–Ω–æ–ø–∫–∏

    # –±–µ—Ä–µ–º–æ name
    topic_name = QUIZ_BUTTONS[topic_key]

    context.user_data["conversation_state"] = "quiz"
    context.user_data["quiz_topic"] = topic_name
    context.user_data["quiz_score"] = 0

    await send_text(update, context, f"–¢–µ–º–∞ –≤–∏–±—Ä–∞–Ω–∞: {topic_name}\n–ì–µ–Ω–µ—Ä—É—é –ø–∏—Ç–∞–Ω–Ω—è ...")
    await ask_question(update, context)

#–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–∏—Ç–∞–Ω–Ω—è
async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    topic = context.user_data.get("quiz_topic")
    if not topic:
        await send_text(update, context, "–°–ø–µ—Ä—à—É –æ–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É –∫–≤—ñ–∑—É –∫–æ–º–∞–Ω–¥–æ—é /quiz.")
        return

    base_prompt = load_prompt("quiz")
    prompt = f"{base_prompt}\n–¢–µ–º–∞: {topic}"

    # –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ system prompt
    chat_gpt.set_prompt(prompt)

    # –æ—Ç—Ä–∏–º—É—î–º–æ –ø–∏—Ç–∞–Ω–Ω—è
    question_text = await chat_gpt.add_message(topic)

    logger.info(f"GPT –∑–∞–ø–∏—Ç: {topic}")
    logger.info(f"GPT –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {question_text}")

    if not question_text:
        await send_text(update, context, "–ü–æ–º–∏–ª–∫–∞ GPT: –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–æ –ø–∏—Ç–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    if "–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å" not in question_text:
        logger.error("GPT –∑–≥–µ–Ω–µ—Ä—É–≤–∞–≤ –ø–∏—Ç–∞–Ω–Ω—è –±–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—É. –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä—É—é...")
        return await ask_question(update, context)

    context.user_data["quiz_question"] = question_text
    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–∏—Ç–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    await send_text(update, context, question_text)
    await send_text(update, context, "–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∏–∂—á–µ (–±—É–∫–≤—É –∞–±–æ —Å–ª–æ–≤–æ):")


#  –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async def quiz_answer_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["conversation_state"] = "quiz"

    message = update.effective_message
    if not message:
        return

    answer = message.text.lower()

    user_answer = update.message.text.strip()
    question = context.user_data.get("quiz_question")

    if not question:
        await send_text(update, context, "–°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø—É—Å—Ç—ñ—Ç—å –∫–≤—ñ–∑ –∫–æ–º–∞–Ω–¥–æ—é /quiz.")
        return

    # –°—Ç–≤–æ—Ä—é—î–º–æ prompt –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ GPT
    check_prompt = (
        f"–ü–µ—Ä–µ–≤—ñ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.\n"
        f"–ü–∏—Ç–∞–Ω–Ω—è:\n{question}\n"
        f"–í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user_answer}\n"
        "–í—ñ–¥–ø–æ–≤—ñ–¥—å –¥–∞–π –°–¢–†–û–ì–û –æ–¥–Ω–∏–º —Ä—è–¥–∫–æ–º:\n"
        "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n"
        "–∞–±–æ\n"
        "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –í–∫–∞–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å."
    )

    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å–∏—Å—Ç–µ–º–Ω–∏–π prompt
    #chat_gpt.set_prompt(check_prompt)

    try:
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ –æ—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ñ–¥ GPT
        full_prompt = f"{check_prompt}\n\n–í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user_answer}"
        result_text = await chat_gpt.add_message(full_prompt)
    except Exception as e:
        context.error = e
        await error_gpt(update, context)
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–æ—Ä–æ–∂–Ω—é –∞–±–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    if not result_text or result_text.strip() == "":
        await send_text(update, context, "GPT –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –±–∞–ª—ñ–≤
    if "‚úÖ" in result_text:
        context.user_data["quiz_score"] = context.user_data.get("quiz_score", 0) + 1

    score = context.user_data.get("quiz_score", 0)
    await send_text(update, context, f"{result_text}\n\nüèÜ –í–∞—à —Ä–∞—Ö—É–Ω–æ–∫: {score}")

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–©–æ —Ä–æ–±–∏–º–æ –¥–∞–ª—ñ?",
        reply_markup=get_keyboard(QUIZ_ACTION_BUTTONS)
    )


# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥—ñ–π –ø—ñ—Å–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
async def quiz_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):

   # –û–±—Ä–æ–±–ª—è—î –∫–Ω–æ–ø–∫–∏ –ø—ñ—Å–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "quiz_next":
        await ask_question(update, context)

    elif data == "quiz_change":
        await quiz_handler(update, context)
        return

    elif data == "quiz_end":
        score = context.user_data.get("quiz_score", 0)
        await send_text(update, context, f"‚úÖ –ö–≤—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n–í–∞—à —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫: {score}")

        # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω –∫–≤—ñ–∑—É
        context.user_data.pop("quiz_topic", None)
        context.user_data.pop("quiz_question", None)
        context.user_data.pop("quiz_score", None)
        context.user_data["conversation_state"] = None

        # –í–∏–∫–ª–∏–∫–∞—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
        await start(update, context)













